===================================
How to use ``0-add_integer`` module
===================================

This module defines a function ``add_integer(a, b=98)``.

usage
=====

The ``0-add_integer`` module takes two integers or float numbers
as an argument and returns the addition of the two numbers a and b.
It uses the '+' math operator.

Importing function
	>>> add_integer = __import__('0-add_integer').add_integer

Tests:

case 1: Two positive numbers:
	>>> add_integer(2, 7)
	9

case 2: Either of the two elements is positive or negative:
	>>> add_integer(2, -1)
	1

case 3: Two negative numbers:
	>>> add_integer(-2, -3)
	-5

case 4: Two floating numbers:
	>>> add_integer(2.9, 0.3)
	2

case 5: When one of the floating number is nagative:
	>>> add_integer(-2.9, 0.3)
	-2

case 6: Passing only the first number. i.e the second is 98 by default
	>>> add_integer(10)
	108

case 7: When one of the argument is not even float or int:
	>>> add_integer("Hi", 5)
	Traceback (most recent call last):
	TypeError: a must be an integer
	>>> add_integer(5, "Hi")
	Traceback (most recent call last):
	TypeError: b must be an integer

case 8: When float overflow present
	>>> add_integer(float('inf'))
	Traceback (most recent call last):
	OverflowError: cannot convert float infinity to integer
	>>> add_integer(5, float('inf'))
	Traceback (most recent call last):
	OverflowError: cannot convert float infinity to integer

casse 9: When float NaN present
	>>> add_integer(float('nan'))
	Traceback (most recent call last):
	ValueError: cannot convert float NaN to integer
	>>> add_integer(float('nan'), 7)
	Traceback (most recent call last):
	ValueError: cannot convert float NaN to integer

==============================================================================
