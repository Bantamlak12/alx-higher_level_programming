===========================================
How to use the ``2-matrix_divided`` module
===========================================

This module defines a function that divides all elements of a matrix.

Usage
=====

==> This module defines a prototype ``def matrix_divided(matrix, div)``
that divides all the elements of a matrix.

==> matrix: must be a lists of integers or floats, otherwise raise a TypeError
exception.

==> Each row of the matrix must be of the same size, otherwise raise a TypeError
exception.

==> div must be a number(integer or float), otherwise raise a TypeError exception.

==> div can't be equal to 0, otherwise raise a ZeroDivisionError exception.

==> All elements of the matrix should be divided by div, rounded to 2 decimal palces

Importing the module
	>>> matrix_divided = __import__('2-matrix_divided').matrix_divided

Tests:

case 1: when the matrix has only one list
	>>> matrix = [
	...		[2, 3]
	...	]
	>>> matrix_divided(matrix, 3)
	[[0.67, 1.0]]

case 2: when the matrix has an empty and a list
	>>> matrix = [
	...		[None],
	...		[2, 4, 6]
	...	]
	>>> matrix_divided(matrix, 3)
	Traceback (most recent call last):
	TypeError: matrix must be a matrix (list of lists) of integers/floats

case 3: when the list is not equal
	>>> matrix = [
	...		[3, 5, 7, 1],
	...		[3, 5, 7]
	...	]
	>>> matrix_divided(matrix, 3)
	Traceback (most recent call last):
	TypeError: Each row of the matrix must have the same size

case 4: when the list is equal but contain none integer or float
	>>> matrix = [
	...		[6, 7, 9],
	...		[4, 'g', 7]
	...	]
	>>> matrix_divided(matrix, 3)
	Traceback (most recent call last):
	TypeError: matrix must be a matrix (list of lists) of integers/floats

case 5: when the ``div`` is not even integer or float
	>>> matrix = [
	...		[2, 4, 14],
	...		[10, 3, 8]
	...	]
	>>> matrix_divided(matrix, 'hello')
	Traceback (most recent call last):
	TypeError: div must be a number
