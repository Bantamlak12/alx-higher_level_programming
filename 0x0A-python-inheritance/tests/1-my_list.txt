How to use the module ``1-my_list.py``
=======================================

This module defines a class ``MyList`` that inherits from list.

================================================================


Importing the module
	>>> MyList = __import__('1-my_list').MyList

Instantiation
=============


case 1: If nothing is appended.
	>>> my_list = MyList()
	>>> my_list.print_sorted()
	[]

case 2: passing None as an argument
	>>> my_list = MyList(None)
	Traceback (most recent call last):
	TypeError: 'NoneType' object is not iterable

case 3: passing a single iterable object
	>>> my_list = MyList([1, 2, 3])
	>>> print(my_list)
	[1, 2, 3]

case 4: passing uniterable object
	>>> my_list = MyList(6)
	Traceback (most recent call last):
	TypeError: 'int' object is not iterable

case 5: passing two iterable objects as an argument
	>>> my_list = MyList([1, 2, 3], [1, 2, 3])
	Traceback (most recent call last):
	TypeError: list expected at most 1 argument, got 2



Usage
=====


case 6: Append integer to the list.
	>>> my_list = MyList()
	>>> my_list.append(1)
	>>> my_list.append(4)
	>>> my_list.append(2)
	>>> my_list.append(3)
	>>> my_list.append(5)
	>>> print(my_list)
	[1, 4, 2, 3, 5]
	>>> my_list.print_sorted()
	[1, 2, 3, 4, 5]
	>>> print(my_list)
	[1, 4, 2, 3, 5]

case 7: Replace a list
	>>> my_list[3] = 6
	>>> print(my_list)
	[1, 4, 2, 6, 5]
	>>> my_list.print_sorted()
	[1, 2, 4, 5, 6]

case 8: Append a nagative number to the list
	>>> my_list.append(-6)
	>>> print(my_list)
	[1, 4, 2, 6, 5, -6]
	>>> my_list.print_sorted()
	[-6, 1, 2, 4, 5, 6]

====================================================================
